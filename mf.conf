; ++ ProjectMF 2.0 AstMF MF_ONLY_V ++
; - MF Register by Dylan Cruz
; - MF Sender by Naveen Albert and Brian Clancy
; - Thanks to Phiber Optic and Donald Froula for support and inspiration.
; - DSP by Asterisk
; - NPSTN.US 2021

[signallookup] ; NPSTN 20210208 NA 
exten => MF,1,Return("|","!0/${ARG3}","!700+900/${ARG1}|!0/${ARG2}","!700+1100/${ARG1}|!0/${ARG2}","!900+1100/${ARG1}|!0/${ARG2}","!700+1300/${ARG1}|!0/${ARG2}","!900+1300/${ARG1}|!0/${ARG2}","!1100+1300/${ARG1}|!0/${ARG2}","!700+1500/${ARG1}|!0/${ARG2}","!900+1500/${ARG1}|!0/${ARG2}","!1100+1500/${ARG1}|!0/${ARG2}","!1300+1500/${ARG1}|!0/${ARG2}","!1100+1700/${ARG5}|!0/${ARG2}","!1500+1700/${ARG4}|!0/${ARG2}","!900+1700/${ARG4}|!0/${ARG2}","!1300+1700/${ARG4}|!0/${ARG2}","!700+1700/${ARG4}|!0/${ARG2}")
exten => SF,1,Return("|",200,100,"!0/200","!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}","!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}|!${ARG1}/${ARG2}|!0/${ARG3}") ; ARG1 = frequency (2600), ARG2 = on (60ms), ARG3 = off (40ms) / SFX = interdigit silence

[mfer] ; NPSTN 20181212 NA/BJC, revised 20210208
exten => start,1,Set(number=${FILTER(0-9,${ARG1})}) ; ARG1 = digits to MF
	same => n,Gosub(signallookup,MF,1(50,50,500,35,100)) ; ARG1 = on, ARG2=off, ARG3=silence, ARG4=ST duration, ARG5=KP duration
	same => n,Set(ARRAY(digitsep,mfx,mf1,mf2,mf3,mf4,mf5,mf6,mf7,mf8,mf9,mf0,mfkp,mfst,mfstp,mfst2p,mfst3p)=${GOSUB_RETVAL}) ; R1, CCIT5: STP ~ code 12, ST2P ~ KP2, ST3P ~ code 11
	same => n,Set(c=0)
	same => n,Set(numdigits=${LEN(${ARG1})})
	same => n,Set(tonestring=${mfx}${digitsep}${mfkp}${digitsep})
	same => n,While($[${c}<${numdigits}])
	same => n,Set(mfnext=${mf${number:${c}:1}})
	same => n,Set(tonestring=${tonestring}${mfnext}${digitsep})
	same => n,Set(c=${INC(c)})
	same => n,EndWhile
	same => n,Set(mfnext=${mfst})
	same => n,Set(tonestring=${tonestring}${mfnext}${digitsep})
	same => n,Set(tonestring=${tonestring}${mfx})
	same => n,Set(toneduration=$[100*${LEN(${ARG1})}+1785])
	same => n,PlayTones(${FILTER(0-9\x21/|+,${tonestring})})
	same => n,Wait($[${toneduration}/1000])
	same => n,StopPlayTones()
	same => n,Return()

[mfmain] ; ARG1=RegisterOPT ARG2=SenderOPT ARG3=FamOPT ARG4=SenderNumber ARG5=SendContext
exten => s,1,Progress
	; Trunk Drop Prep
	same => n,Set(CHANNEL(hangup_handler_push)=trunk_drop,s,1)
	; Set Argument Variables
	same => n,Set(register_opt=${ARG1})
	same => n,Set(sender_opt=${ARG2})
	same => n,Set(fam_opt=${ARG3})
	same => n,Set(sender_digits=${ARG4})
	; Register Eval Start
	same => n,GotoIf($[${register_opt}=0]?local_register:farend_register)
	; Local Register Start
	same => n(local_register),Verbose(AST_MF Using Local Register!)
	; LOCAL_MF_RECV_FULL
	same => n,Set(tbott=0.02)
	same => n,System(echo Channel: Local/${UNIQUEID}@trunk_access >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Context: mfrecv_full >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Extension: ${UNIQUEID} >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Priority: 1 >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo CallerID: "RECV <3>" >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(mv /tmp/cf${UNIQUEID}.tmp /var/spool/asterisk/outgoing/)
	; LOCAL_MF_RECV_ST DROPOUT DETECT
	same => n,System(echo Channel: Local/${UNIQUEID}@trunk_access >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Context: mfrecv_st >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Extension: ${UNIQUEID} >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Priority: 1 >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo CallerID: "RECV <4>" >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(mv /tmp/cf${UNIQUEID}.tmp /var/spool/asterisk/outgoing/)
	same => n,GoTo(tw)
	; Farend Register Start
	same => n(farend_register),Verbose(AST_MF Using Farend Register!)
	; FAREND_MF_RECV
	same => n,Set(tbott=1.5)
	same => n,System(echo Channel: Local/${UNIQUEID}@trunk_access >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Context: register_map >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Extension: ${register_opt} >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Priority: 1 >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo CallerID: "RECV <3>" >> /tmp/cf${UNIQUEID}.tmp) ; Should call-part be ID3 or ID4 (maybe make this dynamic)?!
	same => n,System(mv /tmp/cf${UNIQUEID}.tmp /var/spool/asterisk/outgoing/)
	same => n,GoTo(tw)
	; Trunk Wait Eval
	same => n(tw),Wait(${tbott}) ;Time Based On Trunk Type 0.02 for local 1-1.5? for farend change to be dynamic in future as well
	; Forward Audio Mute
	same => n,System(echo sleep 0.2 >> /tmp/fam_${UNIQUEID}.sh)
	same => n,System(echo 'asterisk -rx "confbridge mute ${UNIQUEID} ${CHANNEL}"' >> /tmp/fam_${UNIQUEID}.sh)
	same => n,System(echo sleep 6 >> /tmp/fam_${UNIQUEID}.sh)
	same => n,System(echo 'asterisk -rx "confbridge unmute ${UNIQUEID} ${CHANNEL}"' >> /tmp/fam_${UNIQUEID}.sh)
	; FAM Eval Start
	same => n,GotoIf($[${fam_opt}=0]?fam:sender)
	; FAM Eval End
	same => n(fam),Verbose(AST_MF [MFMAIN] UID=${UNIQUEID} FAM_EXEC!)
	same => n,System(chmod a+x /tmp/fam_${UNIQUEID}.sh)
	same => n,System(/tmp/fam_${UNIQUEID}.sh &)
	same => n,System(rm -rf /tmp/fam_${UNIQUEID}.sh)
	; Sender Eval Start
	same => n(sender),GotoIf($[${sender_opt}=0]?sender_exec:register_eval)
	; MF Sender
	same => n(sender_exec),Verbose(AST_MF [MFMAIN] UID=${UNIQUEID} Sender called!)
	same => n,System(echo Channel: Local/${UNIQUEID}@trunk_access >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Context: sender >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Extension: ${sender_digits} >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo Priority: 1 >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(echo CallerID: "MF_SENDER <5>" >> /tmp/cf${UNIQUEID}.tmp)
	same => n,System(mv /tmp/cf${UNIQUEID}.tmp /var/spool/asterisk/outgoing/)
	; Register Eval Start
	same => n(register_eval),GotoIf($[${register_opt}=0]?trunk_connect_local:trunk_connect_farend)
	; LOCAL TC
	same => n(trunk_connect_local),Verbose(AST_MF [MFMAIN] UID=${UNIQUEID} Local trunk connect!)
	same => n,Set(VOLUME(TX)=-1)
	same => n,Confbridge(${UNIQUEID},mf_bridge,mf_user)
	same => n,Set(VOLUME(TX)=2)
	same => n,Set(number=${GLOBAL(${UNIQUEID}_decode)})
	same => n,GoTo(${ARG5},${number},1)
	same => n,Hangup
	; FAREND TC
	same => n(trunk_connect_farend),Verbose(AST_MF [MFMAIN] UID=${UNIQUEID} Farend trunk connect!)
	same => n,Answer ; For now.
	same => n,Confbridge(${UNIQUEID},mf_bridge,mf_user)
	same => n,Hangup
	

[register_map] ; Define remote MF registers here
exten => 22,1,Dial(IAX2/npstn@scpa01.ddns.net/5312600)
	same => n,Hangup

[trunk_drop]
exten => s,1,Verbose(AST_MF [TRUNK_DROP] UID=${EXTEN} Trunk reset!)
	same => n,System(/usr/sbin/asterisk -rx "confbridge kick ${UNIQUEID} all")
        same => n,System(rm -rf /tmp/${UNIQUEID}-st.wav)
        same => n,System(rm -rf /tmp/${UNIQUEID}-full.wav)
	same => n,Return()
	
[trunk_access]
exten => _X.,1,Answer ; ANSWER internal trunk
	same => n,Verbose(AST_MF [TRUNK_ACCESS] UID=${EXTEN} Trunk accessed!)
	same => n,Confbridge(${EXTEN},mf_bridge,mf_user)
	same => n,Hangup

[mfrecv_full]
exten => _X.,1,Answer ; ANSWER internal trunk
	same => n,MixMonitor(/tmp/${EXTEN}-full.wav)
	same => n(loop),Verbose(AST_MF [MFRECV_FULL] UID=${EXTEN} Drop out scan started!)
	same => n,Wait(0.5) ; 0.5s
	same => n,Set(SIGD=${ENV(${EXTEN}_SIGD)})
	same => n,GotoIf($["${SIGD}" = "true"]?dropout:loop)
	same => n,Hangup
	same => n(dropout),Verbose(AST_MF [MFRECV_FULL] UID=${EXTEN} Drop out detected!)
	same => n,StopMixMonitor
	same => n,Set(register_output=${SHELL(/etc/asterisk/detect/mf2 /tmp/${EXTEN}-full.wav)})
	same => n,Set(GLOBAL(${EXTEN}_decode)=${register_output})
	same => n,System(/usr/sbin/asterisk -rx "confbridge kick ${EXTEN} all") ; WARNING this will disconnect all listeners.
	same => n,Hangup

[mfrecv_st]
exten => _X.,1,Answer ; ANSWER internal trunk
        same => n,Set(ENV(${EXTEN}_SIGD)=false) ; SIG is not DONE
        same => n,Set(dst=0.5) ; Digit Scan Time
        same => n,Set(timeout_step=0) ; Timeout Step
	same => n,Set(timeout_step_pos=1) ; Timeout Pos Step
        same => n,Set(timeout_drop=10) ; Timeout Seconds
        same => n,Set(timeout_iter=$[${timeout_drop} / ${dst}]) ; Timeout Interations
        same => n(loop),Verbose(AST_MF [MFRECV_ST] UID=${EXTEN} Digit scan start!)
        same => n,Set(timeout_step=$[${timeout_step} + ${timeout_step_pos}])
        same => n,GotoIf($["${timeout_step}" = "${timeout_iter}"]?timeout)
        same => n,MixMonitor(/tmp/${EXTEN}-st.wav)
        same => n,Wait(${dst})
        same => n,StopMixMonitor
        same => n,Set(register_output=${SHELL(/etc/asterisk/detect/mf /tmp/${EXTEN}-st.wav)})
        same => n,Set(GLOBAL(${EXTEN}_decode_st)=${register_output})
        same => n,Set(ST=#) ; ST Tone
        same => n,ExecIf($[${REGEX("${ST}" ${register_output})} = 1]?GoTo(dropout):GoTo(loop))
        same => n,Verbose(AST_MF [MFRECVST] UID=${EXTEN} DFRAW: ${register_output} DFST: ${dropout_eval} DST: ${dst} TS: ${timeout_step} TD: ${timeout_drop} TI: ${timeout_iter} PSTEP: ${timeout_step_pos})
        same => n,GotoIf($["${dropout_eval}" = "true"]?dropout:loop)
        same => n(dropout),Verbose(AST_MF [MFRECV_ST] UID=${EXTEN} Dropout!)
        same => n,Set(ENV(${EXTEN}_SIGD)=true) ; SIG is DONE (MON DROPOUT)
	same => n(timeout),Verbose(AST_MF [MFRECV_ST] UID=${EXTEN} Digit scan time out!)
	same => n,PlayTones(congestion)
	same => n,Wait(60)
	same => n,StopPlayTones
        same => n,Hangup

[sender]
exten => _X.,1,Answer ; ANSWER internal trunk
	same => n,Verbose(AST_MF [SENDER] START GEN: ${EXTEN})
	same => n,GoSub(mfer,start,1(${EXTEN}))
	same => n,Hangup
